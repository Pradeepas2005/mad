package  com.example.practice

import android.app.DatePickerDialog
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_IMMUTABLE
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager

import android.icu.util.Calendar
import android.location.Geocoder
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.renderscript.RenderScript.Priority
import android.view.ContextMenu
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.EditText
import android.widget.Button
import android.widget.DatePicker
import android.widget.PopupMenu
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat

import java.util.Locale



class MainActivity : AppCompatActivity() {
    private val PREFS_NAME="USER"
    private val CHANNEL_ID="example_channel_id"
    private val NOTIFICATION_ID=1

        override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
            // Step 2.1: Variable declarations

        val e1:EditText=findViewById(R.id.e1)
        val e2:EditText=findViewById(R.id.e2)
        val e3:EditText=findViewById(R.id.e3)
        val b1:Button=findViewById(R.id.b1)
        val b2:Button=findViewById(R.id.b2)
        val b4:Button=findViewById(R.id.b4)
            val b7:Button=findViewById(R.id.b7)
            val b8:Button=findViewById(R.id.b8)
            val b9:Button=findViewById(R.id.b9)
            val b10:Button=findViewById(R.id.b10)
            val p1:EditText=findViewById(R.id.p1)

        val tv1: TextView =findViewById(R.id.tv1)
            val tb: TextView =findViewById(R.id.tb)
            val lb:Button=findViewById(R.id.lb)
            val lat:EditText=findViewById(R.id.lat)
            val lng:EditText=findViewById(R.id.lng)


            createNotificationChannel()
        b1.setOnClickListener{
            val ur=e1.text.toString()
            val i=Intent(Intent.ACTION_VIEW)
            i.setData(Uri.parse(ur))
            startActivity(i)
        }
        b2.setOnClickListener{
            val s1=e2.text.toString().toIntOrNull()?:0
            val s2=e3.text.toString().toIntOrNull()?:0
            val s=s1+s2
            val i=Intent(this,MainActivity2::class.java)
            i.putExtra("v",s)

            startActivity(i)
            sendnot(s)
        }
        registerForContextMenu(tv1)

        b4.setOnClickListener{
            val p=PopupMenu(this,b4)
            p.menuInflater.inflate(R.menu.pop_menu,p.menu)
            p.setOnMenuItemClickListener {item->
                when(item.itemId){
                    R.id.pi1->{
                        val i=Intent(this,MainActivity2::class.java)
                        startActivity(i)
                        true
                    }
                    else ->false
                }
            }
        }


        val b5:Button=findViewById(R.id.b5)
        b5.setOnClickListener{
            val b= AlertDialog.Builder(this)
            b.setTitle("alert")
                .setMessage("close??")
                .setNegativeButton("close"){dialog,_,->
                    Toast.makeText(this,"context it1m 1",Toast.LENGTH_LONG).show()
                    dialog.dismiss()
                }
                .setCancelable(true)
                .show()
        }

        val tv3: TextView =findViewById(R.id.tv3)
        val b6:Button=findViewById(R.id.b6)
        val c= Calendar.getInstance()
        b6.setOnClickListener{
            val year=c.get(Calendar.YEAR)
            val mon=c.get(Calendar.MONTH)
            val da=c.get(Calendar.DAY_OF_MONTH)
            val d=DatePickerDialog(this,{_,selectedYear,selectedMonth,selectedDay ->
                val o="$selectedYear"
                tv3.text=o
            },year,mon,da).show()
        }



            val s=getSharedPreferences(PREFS_NAME, MODE_PRIVATE)
            b7.setOnClickListener{
             s.edit().putString("username",p1.text.toString()).apply()
            }

            lb.setOnClickListener{
                val l=lat.text.toString().toDoubleOrNull()
                val ln=lng.text.toString().toDoubleOrNull()
                val g=getlatlng(l,ln)
                tb.text=g

            }


    }


    private fun getlatlng(l: Double?, ln: Double?): String {
        if (l == null || ln == null) return "Invalid coordinates"
        return try {
            val ge = Geocoder(this, Locale.getDefault())
            val addresses = ge.getFromLocation(l, ln, 1)
            if (!addresses.isNullOrEmpty()) {
                val ad = addresses[0]
                "${ad.getAddressLine(0)}\n${ad.locality}, ${ad.countryName}"
            } else {
                "No address found"
            }
        } catch (e: Exception) {
            e.printStackTrace()
            "Error fetching address"
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.option_menu,menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when(item.itemId){
            R.id.oi1->{
                val i=Intent(this,MainActivity2::class.java)
                startActivity(i)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    override fun onCreateContextMenu(
        menu: ContextMenu?,
        v: View?,
        menuInfo: ContextMenu.ContextMenuInfo?
    ) {
        super.onCreateContextMenu(menu, v, menuInfo)

        if(v?.id ==R.id.tv1){
            menu?.setHeaderTitle("context menu")
            menu?.add(0,v.id,0,"ci1")
            menu?.add(0,v.id,1,"ci2")


        }
    }

    override fun onContextItemSelected(item: MenuItem): Boolean {

        return when(item.order){
            0->{ Toast.makeText(this,"context it1m 1",Toast.LENGTH_LONG).show()
                true
            }
            1->{ Toast.makeText(this,"context it1m 2",Toast.LENGTH_LONG).show()
                true
            }
            else->super.onContextItemSelected(item)
        }
    }
    private fun createNotificationChannel(){
        if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.O){
            val cname="sum"
            val des="sample notification"
            val imp=NotificationManager.IMPORTANCE_DEFAULT
            val chan=NotificationChannel(CHANNEL_ID,cname,imp).apply {
                description = des
            }
            val n:NotificationManager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            n.createNotificationChannel(chan)

    }


}
    private fun sendnot(s:Int){
        val i=Intent(this,MainActivity2::class.java)
        val pi= PendingIntent.getActivity(this,0,i,PendingIntent.FLAG_IMMUTABLE)
        val nb= NotificationCompat.Builder(this,CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("addi result")
            .setContentText("$s")
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pi)
            .setAutoCancel(true)
        with(NotificationManagerCompat.from(this)){
            if(ActivityCompat.checkSelfPermission(applicationContext,android.Manifest.permission.POST_NOTIFICATIONS)!= PackageManager.PERMISSION_GRANTED){
                ActivityCompat.requestPermissions(
                    this@MainActivity,
                    arrayOf(android.Manifest.permission.POST_NOTIFICATIONS),
                    101
                )
                return
            }
            notify(NOTIFICATION_ID,nb.build())
            }
    }

    }